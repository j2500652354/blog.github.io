<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>js-web-screen-shot</title>
      <link href="/2022/11/07/chajian/"/>
      <url>/2022/11/07/chajian/</url>
      
        <content type="html"><![CDATA[<p>web端自定义截屏插件(原生JS版)，运行效果：实现web端自定义截屏功能&amp;nbsp;,效果图如下：<img src="en-resource://database/852:1" alt="72f613f6a65969807fb5128eb4be44a3.png"><br>写在前面关于此插件的更多介绍以及实现原理请移步：实现Web端自定义截屏实现Web端自定义截屏(JS版)插件安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yarn add js-web-screen-shot </span><br><span class="line">npm install js-web-screen-shot --save</span><br></pre></td></tr></table></figure><p>插件使用由于插件采用原生js编写且不依赖任何第三方库，因此它可以在任意一台支持js的设备上运行。注意⚠️： 如果需要使用插件的webrtc模式或者截图写入剪切板功能，需要你的网站运行在https环境或者localhost环境。<br>import形式使用插件在需要使用截屏插件的业务代码中导入插件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import ScreenShot from &amp;quot;js-web-screen-shot</span><br></pre></td></tr></table></figure><p>在业务代码中使用时实例化插件即可new ScreenShot();⚠️注意：<br>实例化插件时一定要等dom加载完成，否则插件无法正常工作。<br>cdn形式使用插件将插件的dist文件夹复制到你的项目中使用script标签引入dist目录下的screenShotPlugin.umd.js文件&lt;script src&#x3D;&quot;.&#x2F;screenShotPlugin.umd.js&quot;&gt;&lt;&#x2F;script&gt;在业务代码中使用时实例化插件即可   </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 截图确认按钮回调函数    </span><br><span class="line">const callback = (base64) =&amp;gt;&#123;      console.log(base64);    &#125;    // 截图取消时的回调函数    const closeFn = ()=&amp;gt;&#123;      console.log(&amp;quot;截图窗口关闭&amp;quot;);    &#125;    </span><br><span class="line">new screenShotPlugin(&#123;enableWebRtc: true, completeCallback: callback,closeCallback: closeFn&#125;);⚠️</span><br></pre></td></tr></table></figure><p>注意：实例化插件时一定要等dom加载完成，否则插件无法正常工作。参数说明截图插件有一个可选参数，它接受一个对象，对象每个key的作用如下:<br>enableWebRtc&amp;nbsp;是否启用webrtc，值为boolean类型，值为false则使用html2canvas来截图completeCallback&amp;nbsp;截图完成回调函数，值为Function类型，最右侧的对号图标点击后会将图片的base64地址回传给你定义的函数，如果不传的话则会将图片的base64地址放到sessionStorage中，你可以通过下述方式拿到他：sessionStorage.getItem(&quot;screenShotImg&quot;);closeCallback&amp;nbsp;截图关闭回调函数，值为Function类型。<br>triggerCallback&amp;nbsp;截图响应回调函数，值为Function类型，使用html2canvas截屏时，页面图片过多时响应会较慢；<br>使用webrtc截屏时用户点了分享，该函数为响应完成后触发的事件。回调函数返回一个对象，类型为:&amp;nbsp;{code: number,msg: string}，code为0时代表截图加载完成。cancelCallback&amp;nbsp;取消分享回到函数，值为Function类型，使用webrtc模式截屏时，用户点了取消或者浏览器不支持时所触发的事件。<br>回调函数返回一个对象，类型为：{code: number,msg: string}，code为-1时代表用户未授权或者浏览器不支持webrtc。level&amp;nbsp;截图容器层级，值为number类型。canvasWidth&amp;nbsp;画布宽度，值为number类型，必须与高度一起设置，单独设置无效。canvasHeight&amp;nbsp;画布高度，值为number类型，必须与宽度一起设置，单独设置无效。position&amp;nbsp;截图容器位置，值为{left?: number, top?: number}类型clickCutFullScreen&amp;nbsp;单击截全屏启用状态,值为boolean类型， 默认为falsehiddenToolIco&amp;nbsp;需要隐藏的截图工具栏图标，值为{ save?: boolean; undo?: boolean; confirm?: boolean }类型，默认为{}。<br>传你需要隐藏的图标名称，将值设为true即可。showScreenData&amp;nbsp;截图组件加载完毕后，是否显示截图内容至canvas画布内，值为boolean类型，默认为false。imgSrc&amp;nbsp;截图内容，如果你已经通过其他方式获取到了屏幕内容（例如electron环境），那么可以将获取到的内容传入，此时插件将使用你传进来的图片，值为string类型（可以为图片url地址或者base64），默认为null。loadCrossImg&amp;nbsp;是否加载跨域图片，值为boolean类型，默认为false。screenShotDom&amp;nbsp;需要进行截图的容器，值为HTMLElement类型，默认使用的是body。cropBoxInfo&amp;nbsp;初始裁剪框，值为{ x: number; y: number; w: number; h: number }类型，默认不加载。wrcReplyTime&amp;nbsp;webrtc模式捕捉屏幕时的响应时间，值为number类型，默认为500ms。noScroll&amp;nbsp;截图容器是否可滚动，值为boolean类型，默认为true。上述类型中的?:为ts中的可选类型，意思为：这个key是可选的，如果需要就传，不需要就不传。imgSrc是url时，如果图片资源跨域了，必须让图片服务器允许跨域才能正常加载。同样的loadCrossImg设置为true时，图片资源跨域了也需要让图片服务器允许跨域。快捷键监听插件容器监听了三个快捷键，如下所示：Esc，按下键盘上的esc键时，等同于点了工具栏的关闭图标。Enter，按下键盘上的enter键时，等同于点了截图工具栏的确认图标。Ctrl&#x2F;Command + z，按下这两个组合键时，等同于点了截图工具栏的撤销图标。额外提供的API插件暴露了一些内部变量出来，便于调用者根据自己的需求进行修改。getCanvasController该函数用于获取截图容器的DOM，返回值为HTMLCanvasElement类型。示例代码：import ScreenShot from &quot;js-web-screen-shot&quot;;const screenShotHandler &#x3D; new ScreenShot();const canvasDom &#x3D; screenShotHandler.getCanvasController();注意：如果截图容器尚未加载完毕，获取到的内容可能为null。工具栏图标定制如果你需要修改截图工具栏的图标，可以通过覆盖元素css类名的方式实现，插件内所有图标的css类名如下所示：square 矩形绘制图标round 圆型绘制图标right-top 箭头绘制图标brush 画笔工具mosaicPen 马赛克工具text 文本工具save 保存close 关闭undo 撤销confirm 确认以square为例，要修改它的图标，只需要将下述代码添加进你项目代码的样式中即可。  .square {    background-image: url(&quot;你的图标路径&quot;) !important;        &amp;:hover {      background-image: url(&quot;你的图标路径&quot;) !important;    }        &amp;:active {      background-image: url(&quot;你的图标路径&quot;) !important;    } }写在最后至此，插件的所有使用方法就介绍完了，该插件的Vue3版本，请移步：<a href="https://www.npmjs.com/package/vue-web-screen-shot">vue-web-screen-shot</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/11/01/hello-world/"/>
      <url>/2022/11/01/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
